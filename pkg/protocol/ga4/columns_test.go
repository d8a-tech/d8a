// package columntests contains tests for the columns package
package ga4

import (
	"testing"

	"github.com/d8a-tech/d8a/pkg/columns/columntests"
	"github.com/d8a-tech/d8a/pkg/currency"
	"github.com/d8a-tech/d8a/pkg/warehouse"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEventColumns(t *testing.T) {
	// Test cases for event columns with different values
	var eventColumnTestCases = []struct {
		name        string
		param       string
		value       string
		expected    any
		expectedErr bool
		fieldName   string
		description string
	}{
		// App params
		{
			name:        "EventMethod_Valid",
			param:       "ep.method",
			value:       "email",
			expected:    "email",
			fieldName:   "params_method",
			description: "Valid auth/share method",
		},
		{
			name:        "EventMethod_Empty",
			param:       "ep.method",
			value:       "",
			expected:    nil,
			fieldName:   "params_method",
			description: "Empty method should be nil",
		},
		{
			name:        "EventCancellationReason_Valid",
			param:       "ep.cancellation_reason",
			value:       "user_request",
			expected:    "user_request",
			fieldName:   "params_cancellation_reason",
			description: "Valid cancellation reason",
		},
		{
			name:        "EventCancellationReason_Empty",
			param:       "ep.cancellation_reason",
			value:       "",
			expected:    nil,
			fieldName:   "params_cancellation_reason",
			description: "Empty cancellation reason should be nil",
		},
		{
			name:        "EventFatal_True",
			param:       "ep.fatal",
			value:       "1",
			expected:    true,
			fieldName:   "params_fatal",
			description: "Fatal set to true",
		},
		{
			name:        "EventFatal_False",
			param:       "ep.fatal",
			value:       "0",
			expected:    false,
			fieldName:   "params_fatal",
			description: "Fatal set to false",
		},
		{
			name:        "EventFatal_Empty",
			param:       "ep.fatal",
			value:       "",
			expected:    nil,
			fieldName:   "params_fatal",
			description: "Empty fatal should be false",
		},

		// Firebase params
		{
			name:        "EventFirebaseError_Valid",
			param:       "ep.firebase_error",
			value:       "ErrorCode",
			expected:    "ErrorCode",
			fieldName:   "params_firebase_error",
			description: "Valid firebase error",
		},
		{
			name:        "EventFirebaseError_Empty",
			param:       "ep.firebase_error",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_error",
			description: "Empty firebase error should be nil",
		},
		{
			name:        "EventFirebaseErrorValue_Valid",
			param:       "ep.firebase_error_value",
			value:       "123",
			expected:    "123",
			fieldName:   "params_firebase_error_value",
			description: "Valid firebase error value",
		},
		{
			name:        "EventFirebaseErrorValue_Empty",
			param:       "ep.firebase_error_value",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_error_value",
			description: "Empty firebase error value should be nil",
		},
		{
			name:        "EventFirebaseScreen_Valid",
			param:       "ep.firebase_screen",
			value:       "Home",
			expected:    "Home",
			fieldName:   "params_firebase_screen",
			description: "Valid firebase screen",
		},
		{
			name:        "EventFirebaseScreen_Empty",
			param:       "ep.firebase_screen",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_screen",
			description: "Empty firebase screen should be nil",
		},
		{
			name:        "EventFirebaseScreenClass_Valid",
			param:       "ep.firebase_screen_class",
			value:       "HomeActivity",
			expected:    "HomeActivity",
			fieldName:   "params_firebase_screen_class",
			description: "Valid firebase screen class",
		},
		{
			name:        "EventFirebaseScreenClass_Empty",
			param:       "ep.firebase_screen_class",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_screen_class",
			description: "Empty firebase screen class should be nil",
		},
		{
			name:        "EventFirebaseScreenID_Valid",
			param:       "ep.firebase_screen_id",
			value:       "42",
			expected:    "42",
			fieldName:   "params_firebase_screen_id",
			description: "Valid firebase screen id",
		},
		{
			name:        "EventFirebaseScreenID_Empty",
			param:       "ep.firebase_screen_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_screen_id",
			description: "Empty firebase screen id should be nil",
		},
		{
			name:        "EventFirebasePreviousScreen_Valid",
			param:       "ep.firebase_previous_screen",
			value:       "Settings",
			expected:    "Settings",
			fieldName:   "params_firebase_previous_screen",
			description: "Valid firebase previous screen",
		},
		{
			name:        "EventFirebasePreviousScreen_Empty",
			param:       "ep.firebase_previous_screen",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_previous_screen",
			description: "Empty firebase previous screen should be nil",
		},
		{
			name:        "EventFirebasePreviousClass_Valid",
			param:       "ep.firebase_previous_class",
			value:       "SettingsActivity",
			expected:    "SettingsActivity",
			fieldName:   "params_firebase_previous_class",
			description: "Valid firebase previous class",
		},
		{
			name:        "EventFirebasePreviousClass_Empty",
			param:       "ep.firebase_previous_class",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_previous_class",
			description: "Empty firebase previous class should be nil",
		},
		{
			name:        "EventFirebasePreviousID_Valid",
			param:       "ep.firebase_previous_id",
			value:       "41",
			expected:    "41",
			fieldName:   "params_firebase_previous_id",
			description: "Valid firebase previous id",
		},
		{
			name:        "EventFirebasePreviousID_Empty",
			param:       "ep.firebase_previous_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_firebase_previous_id",
			description: "Empty firebase previous id should be nil",
		},
		// Video params
		{
			name:        "EventVideoCurrentTime_Valid",
			param:       "ep.video_current_time",
			value:       "123",
			expected:    int64(123),
			fieldName:   "params_video_current_time",
			description: "Valid video current time",
		},
		{
			name:        "EventVideoCurrentTime_Empty",
			param:       "ep.video_current_time",
			value:       "",
			expected:    nil,
			fieldName:   "params_video_current_time",
			description: "Empty video current time should be nil",
		},
		{
			name:        "EventVideoDuration_Valid",
			param:       "ep.video_duration",
			value:       "456",
			expected:    int64(456),
			fieldName:   "params_video_duration",
			description: "Valid video duration",
		},
		{
			name:        "EventVideoDuration_Empty",
			param:       "ep.video_duration",
			value:       "",
			expected:    nil,
			fieldName:   "params_video_duration",
			description: "Empty video duration should be nil",
		},
		{
			name:        "EventVideoPercent_Valid",
			param:       "ep.video_percent",
			value:       "75",
			expected:    int64(75),
			fieldName:   "params_video_percent",
			description: "Valid video percent",
		},
		{
			name:        "EventVideoPercent_Empty",
			param:       "ep.video_percent",
			value:       "",
			expected:    nil,
			fieldName:   "params_video_percent",
			description: "Empty video percent should be nil",
		},
		{
			name:        "EventVideoProvider_Valid",
			param:       "ep.video_provider",
			value:       "youtube",
			expected:    "youtube",
			fieldName:   "params_video_provider",
			description: "Valid video provider",
		},
		{
			name:        "EventVideoProvider_Empty",
			param:       "ep.video_provider",
			value:       "",
			expected:    nil,
			fieldName:   "params_video_provider",
			description: "Empty video provider should be nil",
		},
		{
			name:        "EventVideoTitle_Valid",
			param:       "ep.video_title",
			value:       "How to test",
			expected:    "How to test",
			fieldName:   "params_video_title",
			description: "Valid video title",
		},
		{
			name:        "EventVideoTitle_Empty",
			param:       "ep.video_title",
			value:       "",
			expected:    nil,
			fieldName:   "params_video_title",
			description: "Empty video title should be nil",
		},
		{
			name:        "EventVideoURL_Valid",
			param:       "ep.video_url",
			value:       "https://example.com/video",
			expected:    "https://example.com/video",
			fieldName:   "params_video_url",
			description: "Valid video URL",
		},
		{
			name:        "EventVideoURL_Empty",
			param:       "ep.video_url",
			value:       "",
			expected:    nil,
			fieldName:   "params_video_url",
			description: "Empty video URL should be nil",
		},
		// Required fields
		{
			name:        "EventAdEventID_Valid",
			param:       "ep.ad_event_id",
			value:       "ad_evt_123",
			expected:    "ad_evt_123",
			fieldName:   "params_ad_event_id",
			description: "Valid ad event id",
		},
		{
			name:        "EventAdEventID_Empty",
			param:       "ep.ad_event_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_ad_event_id",
			description: "Empty ad event id should be nil",
		},
		{
			name:        "EventExposureTime_Valid",
			param:       "ep.exposure_time",
			value:       "1234",
			expected:    int64(1234),
			fieldName:   "params_exposure_time",
			description: "Valid exposure time",
		},
		{
			name:        "EventExposureTime_Empty",
			param:       "ep.exposure_time",
			value:       "",
			expected:    nil,
			fieldName:   "params_exposure_time",
			description: "Empty exposure time should be nil",
		},
		{
			name:        "EventAdUnitCode_Valid",
			param:       "ep.ad_unit_code",
			value:       "unit_abc",
			expected:    "unit_abc",
			fieldName:   "params_ad_unit_code",
			description: "Valid ad unit code",
		},
		{
			name:        "EventAdUnitCode_Empty",
			param:       "ep.ad_unit_code",
			value:       "",
			expected:    nil,
			fieldName:   "params_ad_unit_code",
			description: "Empty ad unit code should be nil",
		},
		{
			name:        "EventRewardType_Valid",
			param:       "ep.reward_type",
			value:       "coins",
			expected:    "coins",
			fieldName:   "params_reward_type",
			description: "Valid reward type",
		},
		{
			name:        "EventRewardType_Empty",
			param:       "ep.reward_type",
			value:       "",
			expected:    nil,
			fieldName:   "params_reward_type",
			description: "Empty reward type should be nil",
		},
		{
			name:        "EventRewardValue_Valid",
			param:       "ep.reward_value",
			value:       "9.5",
			expected:    float64(9.5),
			fieldName:   "params_reward_value",
			description: "Valid reward value",
		},
		{
			name:        "EventRewardValue_Empty",
			param:       "ep.reward_value",
			value:       "",
			expected:    nil,
			fieldName:   "params_reward_value",
			description: "Empty reward value should be nil",
		},
		{
			name:        "EventName_Valid",
			param:       "en",
			value:       "page_view",
			expected:    "page_view",
			fieldName:   "event_name",
			description: "Required event name field",
		},
		{
			name:        "EventName_Empty",
			param:       "en",
			value:       "",
			expected:    nil,
			expectedErr: true,
			fieldName:   "event_name",
			description: "Empty event name should be nil",
		},

		// Optional document fields
		{
			name:        "EventPageTitle_Valid",
			param:       "dt",
			value:       "Test Page",
			expected:    "Test Page",
			fieldName:   "page_title",
			description: "Valid document title",
		},
		{
			name:        "EventPageTitle_Empty",
			param:       "dt",
			value:       "",
			expected:    "",
			fieldName:   "page_title",
			description: "Empty document title",
		},
		{
			name:        "EventPageLocation_Valid",
			param:       "dl",
			value:       "https://example.com/page",
			expected:    "https://example.com/page",
			fieldName:   "page_location",
			description: "Valid page location",
		},
		{
			name:        "EventPageLocation_Empty",
			param:       "dl",
			value:       "",
			expected:    "",
			fieldName:   "page_location",
			description: "Empty page location",
		},
		{
			name:        "EventPageReferrer_Valid",
			param:       "dr",
			value:       "https://google.com",
			expected:    "https://google.com",
			fieldName:   "page_referrer",
			description: "Valid document referrer",
		},
		{
			name:        "EventPageReferrer_Empty",
			param:       "dr",
			value:       "",
			expected:    "",
			fieldName:   "page_referrer",
			description: "Empty document referrer",
		},
		{
			name:        "EventPagePath_Valid",
			param:       "dl",
			value:       "https://example.com/page",
			expected:    "/page",
			fieldName:   "page_path",
			description: "Valid page path",
		},
		{
			name:        "EventPagePath_NoPath",
			param:       "dl",
			value:       "https://example.com",
			expected:    "",
			fieldName:   "page_path",
			description: "No path",
		},
		{
			name:        "EventPagePath_TrailingSlash",
			param:       "dl",
			value:       "https://example.com/",
			expected:    "/",
			fieldName:   "page_path",
			description: "Trailing slash",
		},
		{
			name:        "EventPagePath_Empty",
			param:       "dl",
			value:       "",
			expected:    "",
			fieldName:   "page_path",
			description: "Empty page path",
		},
		{
			name:        "EventPageHostname_Valid",
			param:       "dl",
			value:       "https://example.com",
			expected:    "example.com",
			fieldName:   "page_hostname",
			description: "Valid page path",
		},
		{
			name:        "EventPageHostname_Empty",
			param:       "dl",
			value:       "",
			expected:    "",
			fieldName:   "page_hostname",
			description: "Empty page hostname",
		},
		{
			name:        "EventPageHostname_Gibberish",
			param:       "dl",
			value:       "ansdaksbfasbf9123123http:dadasdsakasd1337",
			expected:    "",
			fieldName:   "page_hostname",
			description: "Valid page path",
		},

		// Boolean fields
		{
			name:        "EventIgnoreReferrer_True",
			param:       "ir",
			value:       "1",
			expected:    true,
			fieldName:   "params_ignore_referrer",
			description: "Ignore referrer set to true",
		},
		{
			name:        "EventIgnoreReferrer_False",
			param:       "ir",
			value:       "0",
			expected:    false,
			fieldName:   "params_ignore_referrer",
			description: "Ignore referrer set to false",
		},
		{
			name:        "EventIgnoreReferrer_Empty",
			param:       "ir",
			value:       "",
			expected:    nil,
			fieldName:   "params_ignore_referrer",
			description: "Empty ignore referrer should be false",
		},

		// Integer fields
		{
			name:        "EventEngagementTimeMs_Valid",
			param:       "_et",
			value:       "1500",
			expected:    int64(1500),
			fieldName:   "params_engagement_time_ms",
			description: "Valid engagement time in milliseconds",
		},
		{
			name:        "EventEngagementTimeMs_Empty",
			param:       "_et",
			value:       "",
			expected:    nil,
			fieldName:   "params_engagement_time_ms",
			description: "Empty engagement time should be nil",
		},
		{
			name:        "EventEngagementTimeMs_Invalid",
			param:       "_et",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_engagement_time_ms",
			description: "Invalid engagement time should be nil",
		},

		// Content fields
		{
			name:        "EventContentGroup_Valid",
			param:       "ep.content_group",
			value:       "test_group",
			expected:    "test_group",
			fieldName:   "params_content_group",
			description: "Valid content group",
		},
		{
			name:        "EventContentGroup_Empty",
			param:       "ep.content_group",
			value:       "",
			expected:    nil,
			fieldName:   "params_content_group",
			description: "Empty content group should be nil",
		},
		{
			name:        "EventContentID_Valid",
			param:       "ep.content_id",
			value:       "content123",
			expected:    "content123",
			fieldName:   "params_content_id",
			description: "Valid content ID",
		},
		{
			name:        "EventContentID_Empty",
			param:       "ep.content_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_content_id",
			description: "Empty content ID should be nil",
		},
		{
			name:        "EventContentType_Valid",
			param:       "ep.content_type",
			value:       "article",
			expected:    "article",
			fieldName:   "params_content_type",
			description: "Valid content type",
		},
		{
			name:        "EventContentType_Empty",
			param:       "ep.content_type",
			value:       "",
			expected:    nil,
			fieldName:   "params_content_type",
			description: "Empty content type should be nil",
		},
		{
			name:        "EventContentDescription_Valid",
			param:       "ep.content",
			value:       "Test content description",
			expected:    "Test content description",
			fieldName:   "params_content_description",
			description: "Valid content description",
		},
		{
			name:        "EventContentDescription_Empty",
			param:       "ep.content",
			value:       "",
			expected:    nil,
			fieldName:   "params_content_description",
			description: "Empty content description should be nil",
		},

		// Campaign fields
		{
			name:        "EventCampaign_Valid",
			param:       "ep.campaign",
			value:       "summer_sale",
			expected:    "summer_sale",
			fieldName:   "params_campaign",
			description: "Valid campaign name",
		},
		{
			name:        "EventCampaign_Empty",
			param:       "ep.campaign",
			value:       "",
			expected:    nil,
			fieldName:   "params_campaign",
			description: "Empty campaign should be nil",
		},
		{
			name:        "EventCampaignID_Valid",
			param:       "ep.campaign_id",
			value:       "campaign123",
			expected:    "campaign123",
			fieldName:   "params_campaign_id",
			description: "Valid campaign ID",
		},
		{
			name:        "EventCampaignID_Empty",
			param:       "ep.campaign_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_campaign_id",
			description: "Empty campaign ID should be nil",
		},
		{
			name:        "EventCampaignSource_Valid",
			param:       "ep.campaign_source",
			value:       "google",
			expected:    "google",
			fieldName:   "params_campaign_source",
			description: "Valid campaign source",
		},
		{
			name:        "EventCampaignSource_Empty",
			param:       "ep.campaign_source",
			value:       "",
			expected:    nil,
			fieldName:   "params_campaign_source",
			description: "Empty campaign source should be nil",
		},
		{
			name:        "EventCampaignMedium_Valid",
			param:       "ep.campaign_medium",
			value:       "cpc",
			expected:    "cpc",
			fieldName:   "params_campaign_medium",
			description: "Valid campaign medium",
		},
		{
			name:        "EventCampaignMedium_Empty",
			param:       "ep.campaign_medium",
			value:       "",
			expected:    nil,
			fieldName:   "params_campaign_medium",
			description: "Empty campaign medium should be nil",
		},
		{
			name:        "EventCampaignContent_Valid",
			param:       "ep.campaign_content",
			value:       "banner_ad",
			expected:    "banner_ad",
			fieldName:   "params_campaign_content",
			description: "Valid campaign content",
		},
		{
			name:        "EventCampaignContent_Empty",
			param:       "ep.campaign_content",
			value:       "",
			expected:    nil,
			fieldName:   "params_campaign_content",
			description: "Empty campaign content should be nil",
		},
		{
			name:        "EventCampaignTerm_Valid",
			param:       "ep.campaign_term",
			value:       "analytics",
			expected:    "analytics",
			fieldName:   "params_campaign_term",
			description: "Valid campaign term",
		},
		{
			name:        "EventCampaignTerm_Empty",
			param:       "ep.campaign_term",
			value:       "",
			expected:    nil,
			fieldName:   "params_campaign_term",
			description: "Empty campaign term should be nil",
		},
		{
			name:        "EventCoupon_Valid",
			param:       "ep.coupon",
			value:       "SUMMER10",
			expected:    "SUMMER10",
			fieldName:   "params_coupon",
			description: "Valid coupon",
		},
		{
			name:        "EventCoupon_Empty",
			param:       "ep.coupon",
			value:       "",
			expected:    nil,
			fieldName:   "params_coupon",
			description: "Empty coupon should be nil",
		},
		{
			name:        "EventCurrency_Valid",
			param:       "ep.currency",
			value:       "USD",
			expected:    "USD",
			fieldName:   "params_currency",
			description: "Valid currency",
		},
		{
			name:        "EventCurrency_Empty",
			param:       "ep.currency",
			value:       "",
			expected:    nil,
			fieldName:   "params_currency",
			description: "Empty currency should be nil",
		},
		{
			name:        "EventShipping_Valid",
			param:       "ep.shipping",
			value:       "10.00",
			expected:    float64(10.00),
			fieldName:   "params_shipping",
			description: "Valid shipping",
		},
		{
			name:        "EventShipping_Invalid",
			param:       "ep.shipping",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_shipping",
			description: "Invalid shipping should be nil",
		},
		{
			name:        "EventShipping_Empty",
			param:       "ep.shipping",
			value:       "",
			expected:    nil,
			fieldName:   "params_shipping",
			description: "Empty shipping should be nil",
		},
		{
			name:        "EventShippingValue_Valid",
			param:       "ep.shipping",
			value:       "10.00",
			expected:    float64(10.00),
			fieldName:   "shipping_value",
			description: "Valid shipping value",
		},
		{
			name:        "EventShippingValue_Empty",
			param:       "ep.shipping",
			value:       "",
			expected:    float64(0),
			fieldName:   "shipping_value",
			description: "Empty shipping value should be nil",
		},
		{
			name:        "EventShippingValue_Invalid",
			param:       "ep.shipping",
			value:       "invalid",
			expected:    float64(0),
			fieldName:   "shipping_value",
			description: "Invalid shipping value should be nil",
		},
		{
			name:        "EventShippingTier_Valid",
			param:       "ep.shipping_tier",
			value:       "standard",
			expected:    "standard",
			fieldName:   "params_shipping_tier",
			description: "Valid shipping tier",
		},
		{
			name:        "EventShippingTier_Empty",
			param:       "ep.shipping_tier",
			value:       "",
			expected:    nil,
			fieldName:   "params_shipping_tier",
			description: "Empty shipping tier should be nil",
		},
		{
			name:        "EventPaymentType_Valid",
			param:       "ep.payment_type",
			value:       "credit_card",
			expected:    "credit_card",
			fieldName:   "params_payment_type",
			description: "Valid payment type",
		},
		{
			name:        "EventPaymentType_Empty",
			param:       "ep.payment_type",
			value:       "",
			expected:    nil,
			fieldName:   "params_payment_type",
			description: "Empty payment type should be nil",
		},
		{
			name:        "EventTax_Valid",
			param:       "ep.tax",
			value:       "10.00",
			expected:    float64(10.00),
			fieldName:   "params_tax",
			description: "Valid tax",
		},
		{
			name:        "EventTax_Empty",
			param:       "ep.tax",
			value:       "",
			expected:    nil,
			fieldName:   "params_tax",
			description: "Empty tax should be nil",
		},
		{
			name:        "EventTransactionID_Valid",
			param:       "ep.transaction_id",
			value:       "transaction123",
			expected:    "transaction123",
			fieldName:   "params_transaction_id",
			description: "Valid transaction ID",
		},
		{
			name:        "EventValue_Valid",
			param:       "ep.value",
			value:       "10.00",
			expected:    float64(10.00),
			fieldName:   "params_value",
			description: "Valid value",
		},
		{
			name:        "EventValue_Empty",
			param:       "ep.value",
			value:       "",
			expected:    nil,
			fieldName:   "params_value",
			description: "Empty value should be nil",
		},
		{
			name:        "EventItemListID_Valid",
			param:       "ep.item_list_id",
			value:       "related_products",
			expected:    "related_products",
			fieldName:   "params_item_list_id",
			description: "Valid item list ID",
		},
		{
			name:        "EventItemListID_Empty",
			param:       "ep.item_list_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_item_list_id",
			description: "Empty item list ID should be nil",
		},
		{
			name:        "EventItemListName_Valid",
			param:       "ep.item_list_name",
			value:       "Related Products",
			expected:    "Related Products",
			fieldName:   "params_item_list_name",
			description: "Valid item list name",
		},
		{
			name:        "EventItemListName_Empty",
			param:       "ep.item_list_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_item_list_name",
			description: "Empty item list name should be nil",
		},
		{
			name:        "EventCreativeName_Valid",
			param:       "ep.creative_name",
			value:       "summer_banner2",
			expected:    "summer_banner2",
			fieldName:   "params_creative_name",
			description: "Valid creative name",
		},
		{
			name:        "EventCreativeName_Empty",
			param:       "ep.creative_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_creative_name",
			description: "Empty creative name should be nil",
		},
		{
			name:        "EventCreativeSlot_Valid",
			param:       "ep.creative_slot",
			value:       "featured_app_1",
			expected:    "featured_app_1",
			fieldName:   "params_creative_slot",
			description: "Valid creative slot",
		},
		{
			name:        "EventCreativeSlot_Empty",
			param:       "ep.creative_slot",
			value:       "",
			expected:    nil,
			fieldName:   "params_creative_slot",
			description: "Empty creative slot should be nil",
		},
		{
			name:        "EventPromotionID_Valid",
			param:       "ep.promotion_id",
			value:       "P_12345",
			expected:    "P_12345",
			fieldName:   "params_promotion_id",
			description: "Valid promotion ID",
		},
		{
			name:        "EventPromotionID_Empty",
			param:       "ep.promotion_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_promotion_id",
			description: "Empty promotion ID should be nil",
		},
		{
			name:        "EventPromotionName_Valid",
			param:       "ep.promotion_name",
			value:       "Summer Sale",
			expected:    "Summer Sale",
			fieldName:   "params_promotion_name",
			description: "Valid promotion name",
		},
		{
			name:        "EventPromotionName_Empty",
			param:       "ep.promotion_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_promotion_name",
			description: "Empty promotion name should be nil",
		},

		// EventLink fields for outbound click tracking
		{
			name:        "EventLinkClasses_Valid",
			param:       "ep.link_classes",
			value:       "nav-link primary",
			expected:    "nav-link primary",
			fieldName:   "params_link_classes",
			description: "Valid link classes",
		},
		{
			name:        "EventLinkClasses_Empty",
			param:       "ep.link_classes",
			value:       "",
			expected:    nil,
			fieldName:   "params_link_classes",
			description: "Empty link classes should be nil",
		},
		{
			name:        "EventLinkDomain_Valid",
			param:       "ep.link_domain",
			value:       "external.com",
			expected:    "external.com",
			fieldName:   "params_link_domain",
			description: "Valid link domain",
		},
		{
			name:        "EventLinkDomain_Empty",
			param:       "ep.link_domain",
			value:       "",
			expected:    nil,
			fieldName:   "params_link_domain",
			description: "Empty link domain should be nil",
		},
		{
			name:        "EventLinkID_Valid",
			param:       "ep.link_id",
			value:       "footer-link-1",
			expected:    "footer-link-1",
			fieldName:   "params_link_id",
			description: "Valid link ID",
		},
		{
			name:        "EventLinkID_Empty",
			param:       "ep.link_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_link_id",
			description: "Empty link ID should be nil",
		},
		{
			name:        "EventLinkText_Valid",
			param:       "ep.link_text",
			value:       "Click here to learn more",
			expected:    "Click here to learn more",
			fieldName:   "params_link_text",
			description: "Valid link text",
		},
		{
			name:        "EventLinkText_Empty",
			param:       "ep.link_text",
			value:       "",
			expected:    nil,
			fieldName:   "params_link_text",
			description: "Empty link text should be nil",
		},
		{
			name:        "EventLinkURL_Valid",
			param:       "ep.link_url",
			value:       "https://external.com/page",
			expected:    "https://external.com/page",
			fieldName:   "params_link_url",
			description: "Valid link URL",
		},
		{
			name:        "EventLinkURL_Empty",
			param:       "ep.link_url",
			value:       "",
			expected:    nil,
			fieldName:   "params_link_url",
			description: "Empty link URL should be nil",
		},
		{
			name:        "EventOutbound_True",
			param:       "ep.outbound",
			value:       "1",
			expected:    true,
			fieldName:   "params_outbound",
			description: "Outbound set to true",
		},
		{
			name:        "EventOutbound_False",
			param:       "ep.outbound",
			value:       "0",
			expected:    false,
			fieldName:   "params_outbound",
			description: "Outbound set to false",
		},
		{
			name:        "EventOutbound_True_String",
			param:       "ep.outbound",
			value:       "true",
			expected:    true,
			fieldName:   "params_outbound",
			description: "Outbound set to true using string",
		},
		{
			name:        "EventOutbound_Empty",
			param:       "ep.outbound",
			value:       "",
			expected:    nil,
			fieldName:   "params_outbound",
			description: "Empty outbound should be false",
		},
		{
			name:        "EventOutbound_Invalid",
			param:       "ep.outbound",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_outbound",
			description: "Invalid outbound value should be false",
		},
		// Message params
		{
			name:        "EventMessageDeviceTime_Valid",
			param:       "ep.message_device_time",
			value:       "1234567890",
			expected:    int64(1234567890),
			fieldName:   "params_message_device_time",
			description: "Valid message device time",
		},
		{
			name:        "EventMessageDeviceTime_Empty",
			param:       "ep.message_device_time",
			value:       "",
			expected:    nil,
			fieldName:   "params_message_device_time",
			description: "Empty message device time should be nil",
		},
		{
			name:        "EventMessageID_Valid",
			param:       "ep.message_id",
			value:       "msg_12345",
			expected:    "msg_12345",
			fieldName:   "params_message_id",
			description: "Valid message ID",
		},
		{
			name:        "EventMessageID_Empty",
			param:       "ep.message_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_message_id",
			description: "Empty message ID should be nil",
		},
		{
			name:        "EventMessageName_Valid",
			param:       "ep.message_name",
			value:       "welcome_message",
			expected:    "welcome_message",
			fieldName:   "params_message_name",
			description: "Valid message name",
		},
		{
			name:        "EventMessageName_Empty",
			param:       "ep.message_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_message_name",
			description: "Empty message name should be nil",
		},
		{
			name:        "EventMessageTime_Valid",
			param:       "ep.message_time",
			value:       "9876543210",
			expected:    int64(9876543210),
			fieldName:   "params_message_time",
			description: "Valid message time",
		},
		{
			name:        "EventMessageTime_Invalid",
			param:       "ep.message_time",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_message_time",
			description: "Invalid message time should be nil",
		},
		{
			name:        "EventMessageTime_Empty",
			param:       "ep.message_time",
			value:       "",
			expected:    nil,
			fieldName:   "params_message_time",
			description: "Empty message time should be nil",
		},
		{
			name:        "EventMessageType_Valid",
			param:       "ep.message_type",
			value:       "notification",
			expected:    "notification",
			fieldName:   "params_message_type",
			description: "Valid message type",
		},
		{
			name:        "EventMessageType_Empty",
			param:       "ep.message_type",
			value:       "",
			expected:    nil,
			fieldName:   "params_message_type",
			description: "Empty message type should be nil",
		},
		{
			name:        "EventTopic_Valid",
			param:       "ep.topic",
			value:       "news_updates",
			expected:    "news_updates",
			fieldName:   "params_topic",
			description: "Valid topic",
		},
		{
			name:        "EventTopic_Empty",
			param:       "ep.topic",
			value:       "",
			expected:    nil,
			fieldName:   "params_topic",
			description: "Empty topic should be nil",
		},
		{
			name:        "EventLabel_Valid",
			param:       "ep.label",
			value:       "promotional",
			expected:    "promotional",
			fieldName:   "params_label",
			description: "Valid label",
		},
		{
			name:        "EventLabel_Empty",
			param:       "ep.label",
			value:       "",
			expected:    nil,
			fieldName:   "params_label",
			description: "Empty label should be nil",
		},

		// App params
		{
			name:        "EventAppVersion_Valid",
			param:       "ep.app_version",
			value:       "1.2.3",
			expected:    "1.2.3",
			fieldName:   "params_app_version",
			description: "Valid app version",
		},
		{
			name:        "EventAppVersion_Empty",
			param:       "ep.app_version",
			value:       "",
			expected:    nil,
			fieldName:   "params_app_version",
			description: "Empty app version should be nil",
		},
		{
			name:        "EventPreviousAppVersion_Valid",
			param:       "ep.previous_app_version",
			value:       "1.2.2",
			expected:    "1.2.2",
			fieldName:   "params_previous_app_version",
			description: "Valid previous app version",
		},
		{
			name:        "EventPreviousAppVersion_Empty",
			param:       "ep.previous_app_version",
			value:       "",
			expected:    nil,
			fieldName:   "params_previous_app_version",
			description: "Empty previous app version should be nil",
		},
		{
			name:        "EventPreviousFirstOpenCount_Valid",
			param:       "ep.previous_first_open_count",
			value:       "5",
			expected:    int64(5),
			fieldName:   "params_previous_first_open_count",
			description: "Valid previous first open count",
		},
		{
			name:        "EventPreviousFirstOpenCount_Invalid",
			param:       "ep.previous_first_open_count",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_previous_first_open_count",
			description: "Invalid previous first open count should be nil",
		},
		{
			name:        "EventPreviousFirstOpenCount_Empty",
			param:       "ep.previous_first_open_count",
			value:       "",
			expected:    nil,
			fieldName:   "params_previous_first_open_count",
			description: "Empty previous first open count should be nil",
		},
		{
			name:        "EventPreviousOSVersion_Valid",
			param:       "ep.previous_os_version",
			value:       "iOS 15.0",
			expected:    "iOS 15.0",
			fieldName:   "params_previous_os_version",
			description: "Valid previous OS version",
		},
		{
			name:        "EventPreviousOSVersion_Empty",
			param:       "ep.previous_os_version",
			value:       "",
			expected:    nil,
			fieldName:   "params_previous_os_version",
			description: "Empty previous OS version should be nil",
		},
		{
			name:        "EventUpdatedWithAnalytics_True",
			param:       "ep.updated_with_analytics",
			value:       "1",
			expected:    true,
			fieldName:   "params_updated_with_analytics",
			description: "Updated with analytics set to true",
		},
		{
			name:        "EventUpdatedWithAnalytics_False",
			param:       "ep.updated_with_analytics",
			value:       "0",
			expected:    false,
			fieldName:   "params_updated_with_analytics",
			description: "Updated with analytics set to false",
		},
		{
			name:        "EventUpdatedWithAnalytics_Empty",
			param:       "ep.updated_with_analytics",
			value:       "",
			expected:    nil,
			fieldName:   "params_updated_with_analytics",
			description: "Empty updated with analytics should be nil",
		},

		// Gaming params
		{
			name:        "EventAchievementID_Valid",
			param:       "ep.achievement_id",
			value:       "ach_123",
			expected:    "ach_123",
			fieldName:   "params_achievement_id",
			description: "Valid achievement ID",
		},
		{
			name:        "EventAchievementID_Empty",
			param:       "ep.achievement_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_achievement_id",
			description: "Empty achievement ID should be nil",
		},
		{
			name:        "EventCharacter_Valid",
			param:       "ep.character",
			value:       "warrior",
			expected:    "warrior",
			fieldName:   "params_character",
			description: "Valid character",
		},
		{
			name:        "EventCharacter_Empty",
			param:       "ep.character",
			value:       "",
			expected:    nil,
			fieldName:   "params_character",
			description: "Empty character should be nil",
		},
		{
			name:        "EventLevel_Valid",
			param:       "ep.level",
			value:       "10",
			expected:    int64(10),
			fieldName:   "params_level",
			description: "Valid level",
		},
		{
			name:        "EventLevel_Invalid",
			param:       "ep.level",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_level",
			description: "Invalid level should be nil",
		},
		{
			name:        "EventLevel_Empty",
			param:       "ep.level",
			value:       "",
			expected:    nil,
			fieldName:   "params_level",
			description: "Empty level should be nil",
		},
		{
			name:        "EventLevelName_Valid",
			param:       "ep.level_name",
			value:       "Forest Level",
			expected:    "Forest Level",
			fieldName:   "params_level_name",
			description: "Valid level name",
		},
		{
			name:        "EventLevelName_Empty",
			param:       "ep.level_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_level_name",
			description: "Empty level name should be nil",
		},
		{
			name:        "EventScore_Valid",
			param:       "ep.score",
			value:       "1500",
			expected:    int64(1500),
			fieldName:   "params_score",
			description: "Valid score",
		},
		{
			name:        "EventScore_Invalid",
			param:       "ep.score",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_score",
			description: "Invalid score should be nil",
		},
		{
			name:        "EventScore_Empty",
			param:       "ep.score",
			value:       "",
			expected:    nil,
			fieldName:   "params_score",
			description: "Empty score should be nil",
		},
		{
			name:        "EventVirtualCurrencyName_Valid",
			param:       "ep.virtual_currency_name",
			value:       "coins",
			expected:    "coins",
			fieldName:   "params_virtual_currency_name",
			description: "Valid virtual currency name",
		},
		{
			name:        "EventVirtualCurrencyName_Empty",
			param:       "ep.virtual_currency_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_virtual_currency_name",
			description: "Empty virtual currency name should be nil",
		},
		{
			name:        "EventItemName_Valid",
			param:       "ep.item_name",
			value:       "ducats",
			expected:    "ducats",
			fieldName:   "params_item_name",
			description: "Valid item name",
		},
		{
			name:        "EventItemName_Empty",
			param:       "ep.item_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_item_name",
			description: "Empty item name should be nil",
		},
		{
			name:        "EventSuccess_True",
			param:       "ep.success",
			value:       "1",
			expected:    true,
			fieldName:   "params_success",
			description: "Success set to true",
		},
		{
			name:        "EventSuccess_False",
			param:       "ep.success",
			value:       "0",
			expected:    false,
			fieldName:   "params_success",
			description: "Success set to false",
		},
		{
			name:        "EventSuccess_Empty",
			param:       "ep.success",
			value:       "",
			expected:    nil,
			fieldName:   "params_success",
			description: "Empty success should be nil",
		},

		// System params
		{
			name:        "EventVisible_True",
			param:       "ep.visible",
			value:       "1",
			expected:    true,
			fieldName:   "params_visible",
			description: "Visible set to true",
		},
		{
			name:        "EventVisible_False",
			param:       "ep.visible",
			value:       "0",
			expected:    false,
			fieldName:   "params_visible",
			description: "Visible set to false",
		},
		{
			name:        "EventVisible_Empty",
			param:       "ep.visible",
			value:       "",
			expected:    nil,
			fieldName:   "params_visible",
			description: "Empty visible should be nil",
		},
		{
			name:        "EventScreenResolution_Valid",
			param:       "ep.screen_resolution",
			value:       "1920x1080",
			expected:    "1920x1080",
			fieldName:   "params_screen_resolution",
			description: "Valid screen resolution",
		},
		{
			name:        "EventScreenResolution_Empty",
			param:       "ep.screen_resolution",
			value:       "",
			expected:    nil,
			fieldName:   "params_screen_resolution",
			description: "Empty screen resolution should be nil",
		},
		{
			name:        "EventSystemApp_True",
			param:       "ep.system_app",
			value:       "1",
			expected:    true,
			fieldName:   "params_system_app",
			description: "System app set to true",
		},
		{
			name:        "EventSystemApp_False",
			param:       "ep.system_app",
			value:       "0",
			expected:    false,
			fieldName:   "params_system_app",
			description: "System app set to false",
		},
		{
			name:        "EventSystemApp_Empty",
			param:       "ep.system_app",
			value:       "",
			expected:    nil,
			fieldName:   "params_system_app",
			description: "Empty system app should be nil",
		},
		{
			name:        "EventSystemAppUpdate_True",
			param:       "ep.system_app_update",
			value:       "1",
			expected:    true,
			fieldName:   "params_system_app_update",
			description: "System app update set to true",
		},
		{
			name:        "EventSystemAppUpdate_False",
			param:       "ep.system_app_update",
			value:       "0",
			expected:    false,
			fieldName:   "params_system_app_update",
			description: "System app update set to false",
		},
		{
			name:        "EventSystemAppUpdate_Empty",
			param:       "ep.system_app_update",
			value:       "",
			expected:    nil,
			fieldName:   "params_system_app_update",
			description: "Empty system app update should be nil",
		},
		{
			name:        "EventDeferredAnalyticsCollection_True",
			param:       "ep.deferred_analytics_collection",
			value:       "1",
			expected:    true,
			fieldName:   "params_deferred_analytics_collection",
			description: "Deferred analytics collection set to true",
		},
		{
			name:        "EventDeferredAnalyticsCollection_False",
			param:       "ep.deferred_analytics_collection",
			value:       "0",
			expected:    false,
			fieldName:   "params_deferred_analytics_collection",
			description: "Deferred analytics collection set to false",
		},
		{
			name:        "EventDeferredAnalyticsCollection_Empty",
			param:       "ep.deferred_analytics_collection",
			value:       "",
			expected:    nil,
			fieldName:   "params_deferred_analytics_collection",
			description: "Empty deferred analytics collection should be nil",
		},
		{
			name:        "EventResetAnalyticsCause_Valid",
			param:       "ep.reset_analytics_cause",
			value:       "user_request",
			expected:    "user_request",
			fieldName:   "params_reset_analytics_cause",
			description: "Valid reset analytics cause",
		},
		{
			name:        "EventResetAnalyticsCause_Empty",
			param:       "ep.reset_analytics_cause",
			value:       "",
			expected:    nil,
			fieldName:   "params_reset_analytics_cause",
			description: "Empty reset analytics cause should be nil",
		},
		{
			name:        "EventPreviousGmpAppID_Valid",
			param:       "ep.previous_gmp_app_id",
			value:       "com.example.oldapp",
			expected:    "com.example.oldapp",
			fieldName:   "params_previous_gmp_app_id",
			description: "Valid previous GMP app ID",
		},
		{
			name:        "EventPreviousGmpAppID_Empty",
			param:       "ep.previous_gmp_app_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_previous_gmp_app_id",
			description: "Empty previous GMP app ID should be nil",
		},

		// Form and file params
		{
			name:        "EventFileExtension_Valid",
			param:       "ep.file_extension",
			value:       "pdf",
			expected:    "pdf",
			fieldName:   "params_file_extension",
			description: "Valid file extension",
		},
		{
			name:        "EventFileExtension_Empty",
			param:       "ep.file_extension",
			value:       "",
			expected:    nil,
			fieldName:   "params_file_extension",
			description: "Empty file extension should be nil",
		},
		{
			name:        "EventFileName_Valid",
			param:       "ep.file_name",
			value:       "document.pdf",
			expected:    "document.pdf",
			fieldName:   "params_file_name",
			description: "Valid file name",
		},
		{
			name:        "EventFileName_Empty",
			param:       "ep.file_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_file_name",
			description: "Empty file name should be nil",
		},
		{
			name:        "EventFormDestination_Valid",
			param:       "ep.form_destination",
			value:       "https://example.com/submit",
			expected:    "https://example.com/submit",
			fieldName:   "params_form_destination",
			description: "Valid form destination",
		},
		{
			name:        "EventFormDestination_Empty",
			param:       "ep.form_destination",
			value:       "",
			expected:    nil,
			fieldName:   "params_form_destination",
			description: "Empty form destination should be nil",
		},
		{
			name:        "EventFormID_Valid",
			param:       "ep.form_id",
			value:       "contact_form",
			expected:    "contact_form",
			fieldName:   "params_form_id",
			description: "Valid form ID",
		},
		{
			name:        "EventFormID_Empty",
			param:       "ep.form_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_form_id",
			description: "Empty form ID should be nil",
		},
		{
			name:        "EventFormName_Valid",
			param:       "ep.form_name",
			value:       "Contact Form",
			expected:    "Contact Form",
			fieldName:   "params_form_name",
			description: "Valid form name",
		},
		{
			name:        "EventFormName_Empty",
			param:       "ep.form_name",
			value:       "",
			expected:    nil,
			fieldName:   "params_form_name",
			description: "Empty form name should be nil",
		},
		{
			name:        "EventFormSubmitText_Valid",
			param:       "ep.form_submit_text",
			value:       "Submit",
			expected:    "Submit",
			fieldName:   "params_form_submit_text",
			description: "Valid form submit text",
		},
		{
			name:        "EventFormSubmitText_Empty",
			param:       "ep.form_submit_text",
			value:       "",
			expected:    nil,
			fieldName:   "params_form_submit_text",
			description: "Empty form submit text should be nil",
		},
		// Engagement params
		{
			name:        "EventGroupID_Valid",
			param:       "ep.group_id",
			value:       "group123",
			expected:    "group123",
			fieldName:   "params_group_id",
			description: "Valid group ID",
		},
		{
			name:        "EventGroupID_Empty",
			param:       "ep.group_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_group_id",
			description: "Empty group ID should be nil",
		},
		{
			name:        "EventLanguage_Valid",
			param:       "ep.language",
			value:       "en-US",
			expected:    "en-US",
			fieldName:   "params_language",
			description: "Valid language code",
		},
		{
			name:        "EventLanguage_Empty",
			param:       "ep.language",
			value:       "",
			expected:    nil,
			fieldName:   "params_language",
			description: "Empty language should be nil",
		},
		{
			name:        "EventPercentScrolled_Valid",
			param:       "ep.percent_scrolled",
			value:       "75.5",
			expected:    75.5,
			fieldName:   "params_percent_scrolled",
			description: "Valid percent scrolled",
		},
		{
			name:        "EventPercentScrolled_Empty",
			param:       "ep.percent_scrolled",
			value:       "",
			expected:    nil,
			fieldName:   "params_percent_scrolled",
			description: "Empty percent scrolled should be nil",
		},
		{
			name:        "EventPercentScrolled_Invalid",
			param:       "ep.percent_scrolled",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_percent_scrolled",
			description: "Invalid percent scrolled should be nil",
		},
		{
			name:        "EventSearchTerm_Valid",
			param:       "ep.search_term",
			value:       "analytics dashboard",
			expected:    "analytics dashboard",
			fieldName:   "params_search_term",
			description: "Valid search term",
		},
		{
			name:        "EventSearchTerm_Empty",
			param:       "ep.search_term",
			value:       "",
			expected:    nil,
			fieldName:   "params_search_term",
			description: "Empty search term should be nil",
		},
		// Lead params
		{
			name:        "EventUnconvertLeadReason_Valid",
			param:       "ep.unconvert_lead_reason",
			value:       "not_qualified",
			expected:    "not_qualified",
			fieldName:   "params_unconvert_lead_reason",
			description: "Valid unconvert lead reason",
		},
		{
			name:        "EventUnconvertLeadReason_Empty",
			param:       "ep.unconvert_lead_reason",
			value:       "",
			expected:    nil,
			fieldName:   "params_unconvert_lead_reason",
			description: "Empty unconvert lead reason should be nil",
		},
		{
			name:        "EventDisqualifiedLeadReason_Valid",
			param:       "ep.disqualified_lead_reason",
			value:       "budget_too_low",
			expected:    "budget_too_low",
			fieldName:   "params_disqualified_lead_reason",
			description: "Valid disqualified lead reason",
		},
		{
			name:        "EventDisqualifiedLeadReason_Empty",
			param:       "ep.disqualified_lead_reason",
			value:       "",
			expected:    nil,
			fieldName:   "params_disqualified_lead_reason",
			description: "Empty disqualified lead reason should be nil",
		},
		{
			name:        "EventLeadSource_Valid",
			param:       "ep.lead_source",
			value:       "google_ads",
			expected:    "google_ads",
			fieldName:   "params_lead_source",
			description: "Valid lead source",
		},
		{
			name:        "EventLeadSource_Empty",
			param:       "ep.lead_source",
			value:       "",
			expected:    nil,
			fieldName:   "params_lead_source",
			description: "Empty lead source should be nil",
		},
		{
			name:        "EventLeadStatus_Valid",
			param:       "ep.lead_status",
			value:       "qualified",
			expected:    "qualified",
			fieldName:   "params_lead_status",
			description: "Valid lead status",
		},
		{
			name:        "EventLeadStatus_Empty",
			param:       "ep.lead_status",
			value:       "",
			expected:    nil,
			fieldName:   "params_lead_status",
			description: "Empty lead status should be nil",
		},
		{
			name:        "EventFreeTrial_True",
			param:       "ep.free_trial",
			value:       "1",
			expected:    true,
			fieldName:   "params_free_trial",
			description: "Free trial set to true",
		},
		{
			name:        "EventFreeTrial_False",
			param:       "ep.free_trial",
			value:       "0",
			expected:    false,
			fieldName:   "params_free_trial",
			description: "Free trial set to false",
		},
		{
			name:        "EventFreeTrial_Empty",
			param:       "ep.free_trial",
			value:       "",
			expected:    nil,
			fieldName:   "params_free_trial",
			description: "Empty free trial should be nil",
		},
		{
			name:        "EventSubscription_True",
			param:       "ep.subscription",
			value:       "1",
			expected:    true,
			fieldName:   "params_subscription",
			description: "Subscription set to true",
		},
		{
			name:        "EventGtmDebug_Valid",
			param:       "dl",
			value:       "https://example.com/page?foo=bar&gtm_debug=1337",
			expected:    "1337",
			fieldName:   "gtm_debug",
			description: "Valid gtm debug",
		},
		{
			name:        "EventGtmDebug_Empty",
			param:       "dl",
			value:       "https://example.com/page?foo=bar",
			expected:    nil,
			fieldName:   "gtm_debug",
			description: "Empty gtm debug should be nil",
		},
		{
			name:        "EventGl_Valid",
			param:       "dl",
			value:       "https://example.com/page?foo=bar&_gl=1337",
			expected:    "1337",
			fieldName:   "_gl",
			description: "Valid gl",
		},
		{
			name:        "EventGl_Empty",
			param:       "dl",
			value:       "https://example.com/page?foo=bar",
			expected:    nil,
			fieldName:   "gl",
			description: "Empty gl should be nil",
		},
		{
			name:        "ItemsTotalQuantity_Empty",
			param:       "foo",
			value:       "bar",
			expected:    int64(0),
			fieldName:   "items_total_quantity",
			description: "If items are not present, items_total_quantity should be 0",
		},
		{
			name:        "GclidParam_Valid",
			param:       "ep.gclid",
			value:       "1337",
			expected:    "1337",
			fieldName:   "params_gclid",
			description: "Valid gclid",
		},
		{
			name:        "GclidParam_Empty",
			param:       "ep.gclid",
			value:       "",
			expected:    nil,
			fieldName:   "params_gclid",
			description: "Empty gclid should be nil",
		},
		{
			name:        "DclidParam_Valid",
			param:       "ep.dclid",
			value:       "1337",
			expected:    "1337",
			fieldName:   "params_dclid",
			description: "Valid dclid",
		},
		{
			name:        "DclidParam_Empty",
			param:       "ep.dclid",
			value:       "",
			expected:    nil,
			fieldName:   "params_dclid",
			description: "Empty dclid should be nil",
		},
		{
			name:        "SrsltidParam_Valid",
			param:       "ep.srsltid",
			value:       "1337",
			expected:    "1337",
			fieldName:   "params_srsltid",
			description: "Valid srsltid",
		},
		{
			name:        "SrsltidParam_Empty",
			param:       "ep.srsltid",
			value:       "",
			expected:    nil,
			fieldName:   "params_srsltid",
			description: "Empty srsltid should be nil",
		},
		{
			name:        "AclidParam_Valid",
			param:       "ep.aclid",
			value:       "1337",
			expected:    "1337",
			fieldName:   "params_aclid",
			description: "Valid aclid",
		},
		{
			name:        "AclidParam_Empty",
			param:       "ep.aclid",
			value:       "",
			expected:    nil,
			fieldName:   "params_aclid",
			description: "Empty aclid should be nil",
		},
		{
			name:        "AnidParam_Valid",
			param:       "ep.anid",
			value:       "1337",
			expected:    "1337",
			fieldName:   "params_anid",
			description: "Valid anid",
		},
		{
			name:        "AnidParam_Empty",
			param:       "ep.anid",
			value:       "",
			expected:    nil,
			fieldName:   "params_anid",
			description: "Empty anid should be nil",
		},
		{
			name:        "ProductIDParam_Valid",
			param:       "ep.product_id",
			value:       "prod123",
			expected:    "prod123",
			fieldName:   "params_product_id",
			description: "Valid product ID",
		},
		{
			name:        "ProductIDParam_Empty",
			param:       "ep.product_id",
			value:       "",
			expected:    nil,
			fieldName:   "params_product_id",
			description: "Empty product ID should be nil",
		},
		{
			name:        "PriceParam_Valid",
			param:       "ep.price",
			value:       "19.99",
			expected:    19.99,
			fieldName:   "params_price",
			description: "Valid price",
		},
		{
			name:        "PriceParam_Empty",
			param:       "ep.price",
			value:       "",
			expected:    nil,
			fieldName:   "params_price",
			description: "Empty price should be nil",
		},
		{
			name:        "PriceParam_Invalid",
			param:       "ep.price",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_price",
			description: "Invalid price should be nil",
		},
		{
			name:        "QuantityParam_Valid",
			param:       "ep.quantity",
			value:       "5",
			expected:    5.0,
			fieldName:   "params_quantity",
			description: "Valid quantity",
		},
		{
			name:        "QuantityParam_Empty",
			param:       "ep.quantity",
			value:       "",
			expected:    nil,
			fieldName:   "params_quantity",
			description: "Empty quantity should be nil",
		},
		{
			name:        "QuantityParam_Invalid",
			param:       "ep.quantity",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_quantity",
			description: "Invalid quantity should be nil",
		},
		{
			name:        "IntroductoryPriceParam_Valid",
			param:       "ep.introductory_price",
			value:       "9.99",
			expected:    9.99,
			fieldName:   "params_introductory_price",
			description: "Valid introductory price",
		},
		{
			name:        "IntroductoryPriceParam_Empty",
			param:       "ep.introductory_price",
			value:       "",
			expected:    nil,
			fieldName:   "params_introductory_price",
			description: "Empty introductory price should be nil",
		},
		{
			name:        "IntroductoryPriceParam_Invalid",
			param:       "ep.introductory_price",
			value:       "invalid",
			expected:    nil,
			fieldName:   "params_introductory_price",
			description: "Invalid introductory price should be nil",
		},
	}

	for _, tc := range eventColumnTestCases {
		t.Run(tc.name, func(t *testing.T) {
			// given
			columntests.ColumnTestCase(
				t,
				columntests.TestHits{columntests.TestHitOne()},
				func(t *testing.T, closeErr error, whd *warehouse.MockWarehouseDriver) {
					// when + then
					if tc.expectedErr {
						assert.Error(t, closeErr)
					} else {
						require.NoError(t, closeErr)
						record := whd.WriteCalls[0].Records[0]
						assert.Equal(t, tc.expected, record[tc.fieldName], tc.description)
					}
				},
				NewGA4Protocol(currency.NewDummyConverter(1)),
				columntests.EnsureQueryParam(0, tc.param, tc.value))
		})
	}
}

func TestSessionColumns(t *testing.T) {
	// Test cases for session columns
	var sessionColumnTestCases = []struct {
		name        string
		param       string
		value       string
		expected    any
		expectedErr bool
		fieldName   string
		description string
	}{
		{
			name:        "SessionGa4SessionID_Valid",
			param:       "sid",
			value:       "session123",
			expected:    "session123",
			fieldName:   "session_params_ga_session_id",
			description: "Valid GA4 session ID",
		},
		{
			name:        "SessionGa4SessionID_Empty",
			param:       "sid",
			value:       "",
			expected:    "",
			fieldName:   "session_params_ga_session_id",
			description: "Empty GA4 session ID",
		},
		{
			name:        "SessionNumber_Valid",
			param:       "sct",
			value:       "5",
			expected:    int64(5),
			fieldName:   "session_params_ga_session_number",
			description: "Valid session number",
		},
		{
			name:        "SessionNumber_Empty",
			param:       "sct",
			value:       "",
			expected:    0,
			fieldName:   "session_params_ga_session_number",
			description: "Empty session number should be 0",
		},
		{
			name:        "SessionNumber_Invalid",
			param:       "sct",
			value:       "invalid",
			expected:    0,
			fieldName:   "session_params_ga_session_number",
			description: "Invalid session number should be 0",
		},
		{
			name:        "SessionEngagement_Valid",
			param:       "seg",
			value:       "1",
			expected:    int64(1),
			fieldName:   "session_engagement",
			description: "Valid session engagement",
		},
		{
			name:        "SessionEngagement_Empty",
			param:       "seg",
			value:       "",
			expected:    nil,
			fieldName:   "session_engagement",
			description: "Empty session engagement should be nil",
		},
		{
			name:        "SessionEngagement_Invalid",
			param:       "seg",
			value:       "invalid",
			expected:    nil,
			fieldName:   "session_engagement",
			description: "Invalid session engagement should be nil",
		},
	}

	for _, tc := range sessionColumnTestCases {
		t.Run(tc.name, func(t *testing.T) {
			// given
			columntests.ColumnTestCase(
				t,
				columntests.TestHits{columntests.TestHitOne()},
				func(t *testing.T, closeErr error, whd *warehouse.MockWarehouseDriver) {
					// when + then
					if tc.expectedErr {
						assert.Error(t, closeErr)
					} else {
						require.NoError(t, closeErr)
						record := whd.WriteCalls[0].Records[0]
						assert.Equal(t, tc.expected, record[tc.fieldName], tc.description)
					}
				},
				NewGA4Protocol(currency.NewDummyConverter(1)),
				columntests.EnsureQueryParam(0, tc.param, tc.value))
		})
	}
}
